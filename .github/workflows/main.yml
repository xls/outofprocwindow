on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: OutofProcWindow.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  
name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
        
      - name: Build x64
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}
      
      - name: Build x86
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=win32 ${{env.SOLUTION_FILE_PATH}}
      
      - name: zip artifacts 
        run: |
          powershell Compress-Archive bin/win32/Release/*.exe executable-x86.zip 
          powershell Compress-Archive bin/x64/Release/*.exe executable-x64.zip 
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Windows-Release ${{ github.ref }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset x86
        id: upload-release-asset-x86
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./executable-x86.zip
          asset_name: executable-x86.zip
          asset_content_type: application/zip
      
      - name: Upload Release Asset x64
        id: upload-release-asset-x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./executable-x64.zip
          asset_name: executable-x64.zip
          asset_content_type: application/zip
